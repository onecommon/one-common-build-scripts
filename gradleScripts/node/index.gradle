def standardVersion(String version) {
    exec {
        executable "npm"
        args = ['run', 'release', '--', '--release-as', version]
    }
}

def perparePackageJson() {
    println "Checking for existing package.json..."

    if (!file('package.json').exists()) {
        println "package.json does not exist. Generating..."
        new File(projectDir, "package.json").text = """
            {
                "name": "${artifactId}",
                "version": "1.0.0",
                "description": "",
                "scripts": {
                    "release": "standard-version -t \\"\\""
                },
                "husky": {
                    "hooks": {
                    "commit-msg": "commitlint --env HUSKY_GIT_PARAMS"
                    }
                },
                "keywords": [],
                "author": "${author}",
                "devDependencies": {
                    "@commitlint/config-conventional": "^8.2.0",
                    "commitlint": "^8.2.0",
                    "husky": "^3.1.0",
                    "standard-version": "^7.0.1"
                }
            }
        """
    }
    else {
        println "package.json already exists."
    }
}

def prepareNodePackages() {
	println "Checking for commitlint installation..."

	if (!file('./node_modules/commitlint/').exists()) {
        println "commitlint is not installed. Attempting to install commitlint"
        def output = new ByteArrayOutputStream()
        project.exec {
            commandLine 'npm', '-v'
            standardOutput = output
            ignoreExitValue true
        }

        if (output.toString().trim()) {
            project.exec {
                commandLine 'npm', 'i'
            }
        }
        else {
            throw new GradleException("Node installation is missing. Please install the latest node from https://nodejs.org/")
        }
    }
    else {
    	println "commitlint already installed."
    }
}

def prepareNode() {
    perparePackageJson()
    prepareNodePackages()
}

ext {
    standardVersion = { version -> this.standardVersion(version) }
    prepareNode = { this.prepareNode() }
}