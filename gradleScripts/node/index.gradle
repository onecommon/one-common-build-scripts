apply from: 'gradleScripts/log/index.gradle'

def TAG() {
    return 'node'
}

def standardVersion(String version) {
    exec {
        executable "npm"
        args = ['run', 'release', '--', '--release-as', version]
    }
}

def findGradleProperty(String property, String defaultValue) {
    def value = project.findProperty(property)
    if (!value) {
        log(TAG(), "Property $property not found in gradle.properties. Using default value $defaultValue")
    } else {
        log(TAG(), "Property $property found: $value")
    }
    return value
}

def perparePackageJson() {
    log(TAG(), 'Checking for existing package.json...')

    if (!file('package.json').exists()) {
        log(TAG(), 'package.json does not exist. Generating...')
        def artifactId = findGradleProperty('artifactId', 'unnamed')
        def author = findGradleProperty('author', 'unknown')
        new File(projectDir, "package.json").text = """
            {
                "name": "${artifactId}",
                "version": "1.0.0",
                "description": "",
                "scripts": {
                    "release": "standard-version"
                },
                "husky": {
                    "hooks": {
                    "commit-msg": "commitlint --env HUSKY_GIT_PARAMS"
                    }
                },
                "keywords": [],
                "author": "${author}",
                "devDependencies": {
                    "@commitlint/config-conventional": "^8.2.0",
                    "commitlint": "^8.2.0",
                    "husky": "^3.1.0",
                    "standard-version": "^7.0.1"
                }
            }
        """
    }
    else {
        log(TAG(), 'package.json already exists.')
    }
}

def prepareNodePackages() {
    def output = new ByteArrayOutputStream()
    project.exec {
        commandLine 'npm', '-v'
        standardOutput = output
        ignoreExitValue true
    }

    if (output.toString().trim()) {
        project.exec {
            commandLine 'npm', 'i'
        }
    }
    else {
        throw new GradleException('Node installation is missing. Please install the latest node from https://nodejs.org/')
    }
}

def prepareNode() {
    perparePackageJson()
    prepareNodePackages()
}

ext {
    standardVersion = { version -> this.standardVersion(version) }
    prepareNode = { this.prepareNode() }
}